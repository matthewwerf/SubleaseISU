define({ "api": [  {    "type": "post",    "url": "/messages/getHistory/{usernameOfSender}",    "title": "",    "name": "getHistory",    "group": "Message",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID (of the user making the request).</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users unique cookie.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "usernameOfSender",            "description": "<p>Unique ID associated the user (that the requesting user would like their history with).</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Message[]",            "optional": false,            "field": "res",            "description": "<p>Message history with the user is echoed in the response.</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "    HTTP/1.1 200 OK\n\t\t[\n\t\t  {\n\t\t    \"_id\": \"5a206e7e18f49761ae2db0d1\",\n\t\t    \"jsTime\": \"2017-11-30T20:47:58.425Z\",\n\t\t    \"timeSent\": \"2017:11:30:14:47:58\",\n\t\t    \"message\": \"asdf\",\n\t\t    \"senderUsername\": \"username\",\n\t\t    \"receiverUsername\": \"matthewv\",\n\t\t    \"__v\": 0\n\t\t  },\n\t\t  {\n\t\t    \"_id\": \"5a206ea318f49761ae2db0d2\",\n\t\t    \"jsTime\": \"2017-11-30T20:48:35.796Z\",\n\t\t    \"timeSent\": \"2017:11:30:14:48:35\",\n\t\t    \"senderUsername\": \"username\",\n\t\t    \"receiverUsername\": \"matthewv\",\n\t\t    \"message\": \"initial message\",\n\t\t    \"__v\": 0\n\t\t  },\n\t\t  {\n\t\t    \"_id\": \"5a206ef391391761c2e17dd8\",\n\t\t    \"jsTime\": \"2017-11-30T20:49:55.520Z\",\n\t\t    \"timeSent\": \"2017:11:30:14:49:55\",\n\t\t    \"message\": \"asdasdasdasd\",\n\t\t    \"senderUsername\": \"matthewv\",\n\t\t    \"receiverUsername\": \"username\",\n\t\t    \"__v\": 0\n\t\t  }\n\t\t]",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "controllers/messageController.js",    "groupTitle": "Message",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/messages/getUsernamesOfSenders",    "title": "",    "name": "getUsernamesOfSenders",    "group": "Message",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID (of the user making the request).</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users unique cookie.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "string[]",            "optional": false,            "field": "res",            "description": "<p>Array of usernames that the current user has chatted with.</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "    HTTP/1.1 200 OK\n\n[\n    \"BobJohnson12\",\n    \"Matt\",\n    \"JoeJergerSucks\",\n    \"Timmy2\"\n]",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "controllers/messageController.js",    "groupTitle": "Message",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/messages/saveHistory",    "title": "",    "name": "saveHistory",    "group": "Message",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID (of the user making the request).</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users unique session cookie.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "senderUsername",            "description": "<p>Unique username of the person who sent the message.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "receiverUsername",            "description": "<p>Unique username of the person who is receiving the message.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "message",            "description": "<p>The message that is to be sent.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "string",            "optional": false,            "field": "msg",            "description": "<p>Message saying that the message is saved in the history.</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "    HTTP/1.1 200 OK\n\t\t{\n\t\t\t\"msg\": \"Messaged saved\"\n\t\t}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "controllers/messageController.js",    "groupTitle": "Message",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/propertyComment/{propertyID}",    "title": "",    "name": "addComment",    "group": "Property",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users upique cookie.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "commentPosterUsername",            "description": "<p>Username of the comment's poster.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "message",            "description": "<p>The text of the comment.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Property",            "optional": false,            "field": "res",            "description": "<p>The updated property object is returned with the new comment appended to the array of comments.</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "controllers/propertyController.js",    "groupTitle": "Property",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/propertyRating/{propertyID}",    "title": "",    "name": "addRating",    "group": "Property",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users upique cookie.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "ratingPosterUsername",            "description": "<p>Username of the rating's poster.</p>"          },          {            "group": "Parameter",            "type": "number",            "optional": false,            "field": "rating",            "description": "<p>The number rating from 1-5.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Property",            "optional": false,            "field": "res",            "description": "<p>The updated property object is returned with the new rating appended to the array of ratings.</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "controllers/propertyController.js",    "groupTitle": "Property",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/property",    "title": "",    "name": "createroperty",    "group": "Property",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users upique cookie.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "propertyID",            "description": "<p>Unique ID associated with property.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "posterUsername",            "description": "<p>Username of account creating a new property listing.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "leasingAgency",            "description": "<p>The name of the property's leasing agency.</p>"          },          {            "group": "Parameter",            "type": "number",            "optional": false,            "field": "rentValue",            "description": "<p>The dollar amount of a month's rent.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "address",            "description": "<p>The address of the property.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "postingMessage",            "description": "<p>The description the user provides.</p>"          },          {            "group": "Parameter",            "type": "number",            "optional": false,            "field": "bathroomQuantity",            "description": "<p>The number of bathrooms.</p>"          },          {            "group": "Parameter",            "type": "number",            "optional": false,            "field": "roommateQuantity",            "description": "<p>The number of roommates.</p>"          },          {            "group": "Parameter",            "type": "boolean",            "optional": false,            "field": "personalBathroom",            "description": "<p>Whether the posting has a personal bathroom for the renter.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Property",            "optional": false,            "field": "res",            "description": "<p>The property is echoed in response of the error message is returned.</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "    HTTP/1.1 200 OK\n    {\n\t  \"_id\": \"5a1601b55de8fd2455f02392\",\n\t  \"personalBathroom\": false,\n\t  \"bathroomQuantity\": 3,\n\t  \"roommateQuantity\": 1,\n\t  \"posterUsername\": \"username\",\n\t  \"leasingAgency\": \"dfd\",\n   \"milesFromMU\": 0.8,\n\t  \"rentValue\": 2322222,\n\t  \"address\": \"223 Lynn Avenue, Ames, Iowa 50014\",\n\t  \"postingMessage\": \"22\",\n\t  \"propertyID\": \"94b730f94a0c72a2c023099a62c78f59a2bd097b\",\n\t  \"longitude\": \"-93.64681569999999\",\n\t  \"latitude\": \"42.02074409999999\",\n\t  \"__v\": 0,\n\t  \"comments\": [\n\t    {\n\t      \"message\": \"This is a new comment \",\n\t      \"timePosted\": \"2017:11:27:14:55:15\",\n\t      \"commentPosterUsername\": \"matt\"\n\t    },\n\t    {\n\t      \"commentPosterUsername\": \"matt\",\n\t      \"timePosted\": \"2017:11:27:14:55:26\",\n\t      \"message\": \"This is a new comment 2\"\n\t    }\n\t  ],\n\t  \"ratings\": [\n\t    {\n\t      \"ratingPosterUsername\": \"matt\",\n\t      \"timePosted\": \"2017:11:30:12:28:31\",\n\t      \"rating\": 5\n\t    },\n\t    {\n\t      \"rating\": 3,\n\t      \"timePosted\": \"2017:11:30:12:28:34\",\n\t      \"ratingPosterUsername\": \"matt\"\n\t    },\n\t    {\n\t      \"ratingPosterUsername\": \"matt\",\n\t      \"timePosted\": \"2017:11:30:12:28:38\",\n\t      \"rating\": 3\n\t    }\n\t  ],\n\t  \"linkedPictureIDs\": [\"/home/matthewv/SD_B_1_ProjectName/REST/controllers/profilePictures/KENNETH\\ HO.jpg1511\"]\n\t}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "controllers/propertyController.js",    "groupTitle": "Property",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "delete",    "url": "/property/{propertyID}",    "title": "",    "name": "deleteSpecificProperty",    "group": "Property",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users upique cookie.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "propertyID",            "description": "<p>Unique ID associated with property.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "string",            "optional": false,            "field": "message",            "description": "<p>Message is echo back confirming deletion</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "controllers/propertyController.js",    "groupTitle": "Property",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/property/{propertyID}",    "title": "",    "name": "getSpecificProperty",    "group": "Property",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users upique cookie.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "propertyID",            "description": "<p>Unique ID associated with property.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Property",            "optional": false,            "field": "res",            "description": "<p>The property associated with the propertyID is returned.</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "    HTTP/1.1 200 OK\n    {\n\t  \"_id\": \"5a1601b55de8fd2455f02392\",\n\t  \"personalBathroom\": false,\n\t  \"bathroomQuantity\": 3,\n\t  \"roommateQuantity\": 1,\n\t  \"posterUsername\": \"username\",\n\t  \"leasingAgency\": \"dfd\",\n\t  \"rentValue\": 2322222,\n\t  \"address\": \"223 Lynn Avenue, Ames, Iowa 50014\",\n\t  \"postingMessage\": \"22\",\n\t  \"propertyID\": \"94b730f94a0c72a2c023099a62c78f59a2bd097b\",\n\t  \"longitude\": \"-93.64681569999999\",\n\t  \"latitude\": \"42.02074409999999\",\n\t  \"__v\": 0,\n\t  \"comments\": [\n\t    {\n\t      \"message\": \"This is a new comment \",\n\t      \"timePosted\": \"2017:11:27:14:55:15\",\n\t      \"commentPosterUsername\": \"matt\"\n\t    },\n\t    {\n\t      \"commentPosterUsername\": \"matt\",\n\t      \"timePosted\": \"2017:11:27:14:55:26\",\n\t      \"message\": \"This is a new comment 2\"\n\t    }\n\t  ],\n\t  \"ratings\": [\n\t    {\n\t      \"ratingPosterUsername\": \"matt\",\n\t      \"timePosted\": \"2017:11:30:12:28:31\",\n\t      \"rating\": 5\n\t    },\n\t    {\n\t      \"rating\": 3,\n\t      \"timePosted\": \"2017:11:30:12:28:34\",\n\t      \"ratingPosterUsername\": \"matt\"\n\t    },\n\t    {\n\t      \"ratingPosterUsername\": \"matt\",\n\t      \"timePosted\": \"2017:11:30:12:28:38\",\n\t      \"rating\": 3\n\t    }\n\t  ],\n\t  \"linkedPictureIDs\": [\"/home/matthewv/SD_B_1_ProjectName/REST/controllers/profilePictures/KENNETH\\ HO.jpg1511\"]\n\t}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "controllers/propertyController.js",    "groupTitle": "Property",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/listAllProperties",    "title": "",    "name": "listAllProperties",    "group": "Property",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users upique cookie.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Property[]",            "optional": false,            "field": "res",            "description": "<p>Array of properties is echoed back in the response.</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "controllers/propertyController.js",    "groupTitle": "Property",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "get",    "url": "/propertyRating/{propertyID}",    "title": "",    "name": "retrieveRating",    "group": "Property",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users upique cookie.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "number",            "optional": false,            "field": "avgRating",            "description": "<p>The average rating is calculated and returned.</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "controllers/propertyController.js",    "groupTitle": "Property",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/emailOwner/{propertyID}",    "title": "",    "name": "sendEmailToPropertyOwner",    "group": "Property",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users upique cookie.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "propertyID",            "description": "<p>Unique propertyID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subject",            "description": "<p>Email subject.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "messageHTML",            "description": "<p>The text content of the email.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "string",            "optional": false,            "field": "msg",            "description": "<p>Success or error message is returned.</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "controllers/propertyController.js",    "groupTitle": "Property",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "put",    "url": "/property/{propertyID}",    "title": "",    "name": "updateSpecificProperty",    "group": "Property",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users upique cookie.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "propertyID",            "description": "<p>Unique ID associated with property.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "PROPERTY_OBJECT_ATTRIBUTE",            "description": "<p>Any other property model attributes can be added and will be updated in the database.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Property",            "optional": false,            "field": "res",            "description": "<p>The update property object is echoed back or an error code is returned.</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "controllers/propertyController.js",    "groupTitle": "Property",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/users/{userName}",    "title": "",    "name": "allowRouting",    "group": "User",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "userName",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users unique cookie.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "User",            "optional": false,            "field": "res",            "description": "<p>The success message &quot;authentication accepted&quot; is returned</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "controllers/userController.js",    "groupTitle": "User"  },  {    "type": "post",    "url": "/login/{username}",    "title": "",    "name": "authAndReturnCookie",    "group": "User",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "hashedPassword",            "description": "<p>Users hased password.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "User",            "optional": false,            "field": "res",            "description": "<p>Users username and cookie is echoed back in the response.</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "controllers/userController.js",    "groupTitle": "User"  },  {    "type": "post",    "url": "/users",    "title": "",    "name": "createUser",    "group": "User",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "userType",            "description": "<p>User's Account type. (Admin, Leaser, Renter)</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "hashedPassword",            "description": "<p>SHA1 Hash of User's Password.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "email",            "description": "<p>User's email address. (Optional)</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "phoneNumber",            "description": "<p>User's phone number.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "User",            "optional": false,            "field": "res",            "description": "<p>The Object is echoed back in the response</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "controllers/userController.js",    "groupTitle": "User"  },  {    "type": "delete",    "url": "/users/{userName}",    "title": "",    "name": "deleteSpecificUser",    "group": "User",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "userName",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users unique cookie.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "User",            "optional": false,            "field": "res",            "description": "<p>The success message is returned</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "controllers/userController.js",    "groupTitle": "User"  },  {    "type": "get",    "url": "/users/{userName}",    "title": "",    "name": "getSpecificUser",    "group": "User",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "userName",            "description": "<p>Users unique ID.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "User",            "optional": false,            "field": "res",            "description": "<p>The User Object is returned in the response.</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "controllers/userController.js",    "groupTitle": "User"  },  {    "type": "post",    "url": "/retrieveProfilePicture/{userName}",    "title": "",    "name": "retrieveProfilePic",    "group": "User",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "userName",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users unique cookie.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "User",            "optional": false,            "field": "res",            "description": "<p>The profilePictureLocation property of the User object is returned</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "controllers/userController.js",    "groupTitle": "User"  },  {    "type": "put",    "url": "/users/{userName}",    "title": "",    "name": "updateSpecificUser",    "group": "User",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "userName",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users unique cookie.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "email",            "description": "<p>Users email.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "password",            "description": "<p>Users password.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "User",            "optional": false,            "field": "res",            "description": "<p>The User Object is returned in the response</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "controllers/userController.js",    "groupTitle": "User"  },  {    "type": "post",    "url": "/uploadProfilePicture/{userName}",    "title": "",    "name": "uploadProfilePicture",    "group": "User",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "userName",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users unique cookie.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "User",            "optional": false,            "field": "res",            "description": "<p>The User Object is echoed back in the response</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "controllers/userController.js",    "groupTitle": "User"  }] });
