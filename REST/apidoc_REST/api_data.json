[  {    "type": "post",    "url": "/propertyComment/{propertyID}",    "title": "",    "name": "addComment",    "group": "Property",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users upique cookie.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "commentPosterUsername",            "description": "<p>Username of the comment's poster.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "message",            "description": "<p>The text of the comment.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Property",            "optional": false,            "field": "res",            "description": "<p>The updated property object is returned with the new comment appended to the array of comments.</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "controllers/propertyController.js",    "groupTitle": "Property",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/propertyRating/{propertyID}",    "title": "",    "name": "addRating",    "group": "Property",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users upique cookie.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "ratingPosterUsername",            "description": "<p>Username of the rating's poster.</p>"          },          {            "group": "Parameter",            "type": "number",            "optional": false,            "field": "rating",            "description": "<p>The number rating from 1-5.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Property",            "optional": false,            "field": "res",            "description": "<p>The updated property object is returned with the new rating appended to the array of ratings.</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "controllers/propertyController.js",    "groupTitle": "Property",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/property",    "title": "",    "name": "createroperty",    "group": "Property",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users upique cookie.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "propertyID",            "description": "<p>Unique ID associated with property.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "posterUsername",            "description": "<p>Username of account creating a new property listing.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "leasingAgency",            "description": "<p>The name of the property's leasing agency.</p>"          },          {            "group": "Parameter",            "type": "number",            "optional": false,            "field": "rentValue",            "description": "<p>The dollar amount of a month's rent.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "address",            "description": "<p>The address of the property.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "postingMessage",            "description": "<p>The description the user provides.</p>"          },          {            "group": "Parameter",            "type": "number",            "optional": false,            "field": "bathroomQuantity",            "description": "<p>The number of bathrooms.</p>"          },          {            "group": "Parameter",            "type": "number",            "optional": false,            "field": "roommateQuantity",            "description": "<p>The number of roommates.</p>"          },          {            "group": "Parameter",            "type": "boolean",            "optional": false,            "field": "personalBathroom",            "description": "<p>Whether the posting has a personal bathroom for the renter.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Property",            "optional": false,            "field": "res",            "description": "<p>The property is echoed in response of the error message is returned.</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "controllers/propertyController.js",    "groupTitle": "Property",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "delete",    "url": "/property/{propertyID}",    "title": "",    "name": "deleteSpecificProperty",    "group": "Property",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users upique cookie.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "propertyID",            "description": "<p>Unique ID associated with property.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "string",            "optional": false,            "field": "message",            "description": "<p>Message is echo back confirming deletion</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "controllers/propertyController.js",    "groupTitle": "Property",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/property/{propertyID}",    "title": "",    "name": "getSpecificProperty",    "group": "Property",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users upique cookie.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "propertyID",            "description": "<p>Unique ID associated with property.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Property",            "optional": false,            "field": "res",            "description": "<p>The property associated with the propertyID is returned.</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "controllers/propertyController.js",    "groupTitle": "Property",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/listAllProperties",    "title": "",    "name": "listAllProperties",    "group": "Property",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users upique cookie.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Property[]",            "optional": false,            "field": "res",            "description": "<p>Array of properties is echoed back in the response.</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "controllers/propertyController.js",    "groupTitle": "Property",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "get",    "url": "/propertyRating/{propertyID}",    "title": "",    "name": "retrieveRating",    "group": "Property",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users upique cookie.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "number",            "optional": false,            "field": "avgRating",            "description": "<p>The average rating is calculated and returned.</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "controllers/propertyController.js",    "groupTitle": "Property",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/emailOwner/{propertyID}",    "title": "",    "name": "sendEmailToPropertyOwner",    "group": "Property",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users upique cookie.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "propertyID",            "description": "<p>Unique propertyID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subject",            "description": "<p>Email subject.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "messageHTML",            "description": "<p>The text content of the email.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "string",            "optional": false,            "field": "msg",            "description": "<p>Success or error message is returned.</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "controllers/propertyController.js",    "groupTitle": "Property",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "put",    "url": "/property/{propertyID}",    "title": "",    "name": "updateSpecificProperty",    "group": "Property",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users upique cookie.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "propertyID",            "description": "<p>Unique ID associated with property.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "PROPERTY_OBJECT_ATTRIBUTE",            "description": "<p>Any other property model attributes can be added and will be updated in the database.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Property",            "optional": false,            "field": "res",            "description": "<p>The update property object is echoed back or an error code is returned.</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "controllers/propertyController.js",    "groupTitle": "Property",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/login/{username}",    "title": "",    "name": "authAndReturnCookie",    "group": "User",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "hashedPassword",            "description": "<p>Users hased password.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "User",            "optional": false,            "field": "res",            "description": "<p>Users username and cookie is echoed back in the response.</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "controllers/userController.js",    "groupTitle": "User"  },  {    "type": "post",    "url": "/users",    "title": "",    "name": "createUser",    "group": "User",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "userType",            "description": "<p>User's Account type. (Admin, Leaser, Renter)</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "hashedPassword",            "description": "<p>SHA1 Hash of User's Password.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "email",            "description": "<p>User's email address. (Optional)</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "phoneNumber",            "description": "<p>User's phone number.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "User",            "optional": false,            "field": "res",            "description": "<p>The Object is echoed back in the response.</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "controllers/userController.js",    "groupTitle": "User"  }]
