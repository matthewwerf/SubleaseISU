[  {    "type": "post",    "url": "/messages/getHistory/{usernameOfSender}",    "title": "",    "name": "getHistory",    "group": "Message",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID (of the user making the request).</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users unique cookie.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "usernameOfSender",            "description": "<p>Unique ID associated the user (that the requesting user would like their history with).</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Message[]",            "optional": false,            "field": "res",            "description": "<p>Message history with the user is echoed in the response.</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "    HTTP/1.1 200 OK\n\t\t[\n\t\t  {\n\t\t    \"_id\": \"5a206e7e18f49761ae2db0d1\",\n\t\t    \"jsTime\": \"2017-11-30T20:47:58.425Z\",\n\t\t    \"timeSent\": \"2017:11:30:14:47:58\",\n\t\t    \"message\": \"asdf\",\n\t\t    \"senderUsername\": \"username\",\n\t\t    \"receiverUsername\": \"matthewv\",\n\t\t    \"__v\": 0\n\t\t  },\n\t\t  {\n\t\t    \"_id\": \"5a206ea318f49761ae2db0d2\",\n\t\t    \"jsTime\": \"2017-11-30T20:48:35.796Z\",\n\t\t    \"timeSent\": \"2017:11:30:14:48:35\",\n\t\t    \"senderUsername\": \"username\",\n\t\t    \"receiverUsername\": \"matthewv\",\n\t\t    \"message\": \"initial message\",\n\t\t    \"__v\": 0\n\t\t  },\n\t\t  {\n\t\t    \"_id\": \"5a206ef391391761c2e17dd8\",\n\t\t    \"jsTime\": \"2017-11-30T20:49:55.520Z\",\n\t\t    \"timeSent\": \"2017:11:30:14:49:55\",\n\t\t    \"message\": \"asdasdasdasd\",\n\t\t    \"senderUsername\": \"matthewv\",\n\t\t    \"receiverUsername\": \"username\",\n\t\t    \"__v\": 0\n\t\t  }\n\t\t]",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "controllers/messageController.js",    "groupTitle": "Message",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/messages/getUsernamesOfSenders",    "title": "",    "name": "getUsernamesOfSenders",    "group": "Message",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID (of the user making the request).</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users unique cookie.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "string[]",            "optional": false,            "field": "res",            "description": "<p>Array of usernames that the current user has chatted with.</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "    HTTP/1.1 200 OK\n\n[\n    \"BobJohnson12\",\n    \"Matt\",\n    \"JoeJergerSucks\",\n    \"Timmy2\"\n]",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "controllers/messageController.js",    "groupTitle": "Message",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/messages/saveHistory",    "title": "",    "name": "saveHistory",    "group": "Message",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID (of the user making the request).</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users unique session cookie.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "senderUsername",            "description": "<p>Unique username of the person who sent the message.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "receiverUsername",            "description": "<p>Unique username of the person who is receiving the message.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "message",            "description": "<p>The message that is to be sent.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "string",            "optional": false,            "field": "msg",            "description": "<p>Message saying that the message is saved in the history.</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "    HTTP/1.1 200 OK\n\t\t{\n\t\t\t\"msg\": \"Messaged saved\"\n\t\t}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "controllers/messageController.js",    "groupTitle": "Message",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/propertyComment/{propertyID}",    "title": "",    "name": "addComment",    "group": "Property_Comments",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users upique cookie.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "commentPosterUsername",            "description": "<p>Username of the comment's poster.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "message",            "description": "<p>The text of the comment.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Property",            "optional": false,            "field": "res",            "description": "<p>The updated property object is returned with the new comment appended to the array of comments.</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n  \"_id\": \"5a1601b55de8fd2455f02392\",\n  \"personalBathroom\": false,\n  \"bathroomQuantity\": 3,\n  \"roommateQuantity\": 1,\n  \"posterUsername\": \"username\",\n  \"leasingAgency\": \"dfd\",\n   \"milesFromMU\": 0.8,\n  \"rentValue\": 2322222,\n  \"address\": \"223 Lynn Avenue, Ames, Iowa 50014\",\n  \"postingMessage\": \"22\",\n  \"propertyID\": \"94b730f94a0c72a2c023099a62c78f59a2bd097b\",\n  \"longitude\": \"-93.64681569999999\",\n  \"latitude\": \"42.02074409999999\",\n  \"__v\": 0,\n  \"comments\": [\n    {\n      \"message\": \"This is a new comment \",\n      \"timePosted\": \"2017:11:27:14:55:15\",\n      \"commentPosterUsername\": \"matt\"\n    },\n    {\n      \"commentPosterUsername\": \"matt\",\n      \"timePosted\": \"2017:11:27:14:55:26\",\n      \"message\": \"This is a new comment 2\"\n    }\n  ],\n  \"ratings\": [\n    {\n      \"ratingPosterUsername\": \"matt\",\n      \"timePosted\": \"2017:11:30:12:28:31\",\n      \"rating\": 5\n    },\n    {\n      \"rating\": 3,\n      \"timePosted\": \"2017:11:30:12:28:34\",\n      \"ratingPosterUsername\": \"matt\"\n    },\n    {\n      \"ratingPosterUsername\": \"matt\",\n      \"timePosted\": \"2017:11:30:12:28:38\",\n      \"rating\": 3\n    }\n ],\n \"linkedPictureIDs\": [\"/home/matthewv/SD_B_1_ProjectName/REST/controllers/profilePictures/KENNETH\\ HO.jpg1511\"]\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "controllers/propertyController.js",    "groupTitle": "Property_Comments",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/emailOwner/{propertyID}",    "title": "",    "name": "sendEmailToPropertyOwner",    "group": "Property_Email",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users upique cookie.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "propertyID",            "description": "<p>Unique propertyID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subject",            "description": "<p>Email subject.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "messageHTML",            "description": "<p>The text content of the email.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "string",            "optional": false,            "field": "msg",            "description": "<p>Success or error message is returned.</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n  \"msg\" : \"Message Successfully sent\"\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "controllers/propertyController.js",    "groupTitle": "Property_Email",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "get",    "url": "/retrievePropertyPicture/{propertyID}",    "title": "",    "name": "retrievePropertyPicture",    "group": "Property_Pictures",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users upique cookie.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "File",            "optional": false,            "field": "file",            "description": "<p>The requested file is returned.</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "controllers/propertyController.js",    "groupTitle": "Property_Pictures",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "get",    "url": "/propertyPictures/{propertyID}",    "title": "",    "name": "uploadPropertyPictures",    "group": "Property_Pictures",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID. (formdata)</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users upique cookie. (formdata)</p>"          },          {            "group": "Parameter",            "type": "File",            "optional": false,            "field": "fileArray",            "description": "<p>Array of files sent through formdata.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Property",            "optional": false,            "field": "res",            "description": "<p>The updated property object is echoed back.</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n  \"_id\": \"5a1601b55de8fd2455f02392\",\n  \"personalBathroom\": false,\n  \"bathroomQuantity\": 3,\n  \"roommateQuantity\": 1,\n  \"posterUsername\": \"username\",\n  \"leasingAgency\": \"dfd\",\n   \"milesFromMU\": 0.8,\n  \"rentValue\": 2322222,\n  \"address\": \"223 Lynn Avenue, Ames, Iowa 50014\",\n  \"postingMessage\": \"22\",\n  \"propertyID\": \"94b730f94a0c72a2c023099a62c78f59a2bd097b\",\n  \"longitude\": \"-93.64681569999999\",\n  \"latitude\": \"42.02074409999999\",\n  \"__v\": 0,\n  \"comments\": [\n    {\n      \"message\": \"This is a new comment \",\n      \"timePosted\": \"2017:11:27:14:55:15\",\n      \"commentPosterUsername\": \"matt\"\n    },\n    {\n      \"commentPosterUsername\": \"matt\",\n      \"timePosted\": \"2017:11:27:14:55:26\",\n      \"message\": \"This is a new comment 2\"\n    }\n  ],\n  \"ratings\": [\n    {\n      \"ratingPosterUsername\": \"matt\",\n      \"timePosted\": \"2017:11:30:12:28:31\",\n      \"rating\": 5\n    },\n    {\n      \"rating\": 3,\n      \"timePosted\": \"2017:11:30:12:28:34\",\n      \"ratingPosterUsername\": \"matt\"\n    },\n    {\n      \"ratingPosterUsername\": \"matt\",\n      \"timePosted\": \"2017:11:30:12:28:38\",\n      \"rating\": 3\n    }\n ],\n \"linkedPictureIDs\": [\"/home/matthewv/SD_B_1_ProjectName/REST/controllers/profilePictures/KENNETH\\ HO.jpg1511\"]\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "controllers/propertyController.js",    "groupTitle": "Property_Pictures",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/propertyRating/{propertyID}",    "title": "",    "name": "addRating",    "group": "Property_Ratings",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users upique cookie.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "ratingPosterUsername",            "description": "<p>Username of the rating's poster.</p>"          },          {            "group": "Parameter",            "type": "number",            "optional": false,            "field": "rating",            "description": "<p>The number rating from 1-5.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Property",            "optional": false,            "field": "res",            "description": "<p>The updated property object is returned with the new rating appended to the array of ratings.</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n  \"_id\": \"5a1601b55de8fd2455f02392\",\n  \"personalBathroom\": false,\n  \"bathroomQuantity\": 3,\n  \"roommateQuantity\": 1,\n  \"posterUsername\": \"username\",\n  \"leasingAgency\": \"dfd\",\n   \"milesFromMU\": 0.8,\n  \"rentValue\": 2322222,\n  \"address\": \"223 Lynn Avenue, Ames, Iowa 50014\",\n  \"postingMessage\": \"22\",\n  \"propertyID\": \"94b730f94a0c72a2c023099a62c78f59a2bd097b\",\n  \"longitude\": \"-93.64681569999999\",\n  \"latitude\": \"42.02074409999999\",\n  \"__v\": 0,\n  \"comments\": [\n    {\n      \"message\": \"This is a new comment \",\n      \"timePosted\": \"2017:11:27:14:55:15\",\n      \"commentPosterUsername\": \"matt\"\n    },\n    {\n      \"commentPosterUsername\": \"matt\",\n      \"timePosted\": \"2017:11:27:14:55:26\",\n      \"message\": \"This is a new comment 2\"\n    }\n  ],\n  \"ratings\": [\n    {\n      \"ratingPosterUsername\": \"matt\",\n      \"timePosted\": \"2017:11:30:12:28:31\",\n      \"rating\": 5\n    },\n    {\n      \"rating\": 3,\n      \"timePosted\": \"2017:11:30:12:28:34\",\n      \"ratingPosterUsername\": \"matt\"\n    },\n    {\n      \"ratingPosterUsername\": \"matt\",\n      \"timePosted\": \"2017:11:30:12:28:38\",\n      \"rating\": 3\n    }\n ],\n \"linkedPictureIDs\": [\"/home/matthewv/SD_B_1_ProjectName/REST/controllers/profilePictures/KENNETH\\ HO.jpg1511\"]\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "controllers/propertyController.js",    "groupTitle": "Property_Ratings",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "get",    "url": "/propertyRating/{propertyID}",    "title": "",    "name": "retrieveRating",    "group": "Property_Ratings",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users upique cookie.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "number",            "optional": false,            "field": "avgRating",            "description": "<p>The average rating is calculated and returned.</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n  \"avgRating\" : 3.75\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "controllers/propertyController.js",    "groupTitle": "Property_Ratings",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/property",    "title": "",    "name": "createroperty",    "group": "Property",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users upique cookie.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "propertyID",            "description": "<p>Unique ID associated with property.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "posterUsername",            "description": "<p>Username of account creating a new property listing.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "leasingAgency",            "description": "<p>The name of the property's leasing agency.</p>"          },          {            "group": "Parameter",            "type": "number",            "optional": false,            "field": "rentValue",            "description": "<p>The dollar amount of a month's rent.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "address",            "description": "<p>The address of the property.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "postingMessage",            "description": "<p>The description the user provides.</p>"          },          {            "group": "Parameter",            "type": "number",            "optional": false,            "field": "bathroomQuantity",            "description": "<p>The number of bathrooms.</p>"          },          {            "group": "Parameter",            "type": "number",            "optional": false,            "field": "roommateQuantity",            "description": "<p>The number of roommates.</p>"          },          {            "group": "Parameter",            "type": "boolean",            "optional": false,            "field": "personalBathroom",            "description": "<p>Whether the posting has a personal bathroom for the renter.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Property",            "optional": false,            "field": "res",            "description": "<p>The property is echoed in response of the error message is returned.</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n  \"_id\": \"5a1601b55de8fd2455f02392\",\n  \"personalBathroom\": false,\n  \"bathroomQuantity\": 3,\n  \"roommateQuantity\": 1,\n  \"posterUsername\": \"username\",\n  \"leasingAgency\": \"dfd\",\n   \"milesFromMU\": 0.8,\n  \"rentValue\": 2322222,\n  \"address\": \"223 Lynn Avenue, Ames, Iowa 50014\",\n  \"postingMessage\": \"22\",\n  \"propertyID\": \"94b730f94a0c72a2c023099a62c78f59a2bd097b\",\n  \"longitude\": \"-93.64681569999999\",\n  \"latitude\": \"42.02074409999999\",\n  \"__v\": 0,\n  \"comments\": [\n    {\n      \"message\": \"This is a new comment \",\n      \"timePosted\": \"2017:11:27:14:55:15\",\n      \"commentPosterUsername\": \"matt\"\n    },\n    {\n      \"commentPosterUsername\": \"matt\",\n      \"timePosted\": \"2017:11:27:14:55:26\",\n      \"message\": \"This is a new comment 2\"\n    }\n  ],\n  \"ratings\": [\n    {\n      \"ratingPosterUsername\": \"matt\",\n      \"timePosted\": \"2017:11:30:12:28:31\",\n      \"rating\": 5\n    },\n    {\n      \"rating\": 3,\n      \"timePosted\": \"2017:11:30:12:28:34\",\n      \"ratingPosterUsername\": \"matt\"\n    },\n    {\n      \"ratingPosterUsername\": \"matt\",\n      \"timePosted\": \"2017:11:30:12:28:38\",\n      \"rating\": 3\n    }\n ],\n \"linkedPictureIDs\": [\"/home/matthewv/SD_B_1_ProjectName/REST/controllers/profilePictures/KENNETH\\ HO.jpg1511\"]\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "controllers/propertyController.js",    "groupTitle": "Property",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "delete",    "url": "/property/{propertyID}",    "title": "",    "name": "deleteSpecificProperty",    "group": "Property",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users upique cookie.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "propertyID",            "description": "<p>Unique ID associated with property.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "string",            "optional": false,            "field": "message",            "description": "<p>Message is echo back confirming deletion</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n  \"message\" : \"Property successfully deleted\"\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "controllers/propertyController.js",    "groupTitle": "Property",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/property/{propertyID}",    "title": "",    "name": "getSpecificProperty",    "group": "Property",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users upique cookie.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "propertyID",            "description": "<p>Unique ID associated with property.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Property",            "optional": false,            "field": "res",            "description": "<p>The property associated with the propertyID is returned.</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n  \"_id\": \"5a1601b55de8fd2455f02392\",\n  \"personalBathroom\": false,\n  \"bathroomQuantity\": 3,\n  \"roommateQuantity\": 1,\n  \"posterUsername\": \"username\",\n  \"leasingAgency\": \"dfd\",\n   \"milesFromMU\": 0.8,\n  \"rentValue\": 2322222,\n  \"address\": \"223 Lynn Avenue, Ames, Iowa 50014\",\n  \"postingMessage\": \"22\",\n  \"propertyID\": \"94b730f94a0c72a2c023099a62c78f59a2bd097b\",\n  \"longitude\": \"-93.64681569999999\",\n  \"latitude\": \"42.02074409999999\",\n  \"__v\": 0,\n  \"comments\": [\n    {\n      \"message\": \"This is a new comment \",\n      \"timePosted\": \"2017:11:27:14:55:15\",\n      \"commentPosterUsername\": \"matt\"\n    },\n    {\n      \"commentPosterUsername\": \"matt\",\n      \"timePosted\": \"2017:11:27:14:55:26\",\n      \"message\": \"This is a new comment 2\"\n    }\n  ],\n  \"ratings\": [\n    {\n      \"ratingPosterUsername\": \"matt\",\n      \"timePosted\": \"2017:11:30:12:28:31\",\n      \"rating\": 5\n    },\n    {\n      \"rating\": 3,\n      \"timePosted\": \"2017:11:30:12:28:34\",\n      \"ratingPosterUsername\": \"matt\"\n    },\n    {\n      \"ratingPosterUsername\": \"matt\",\n      \"timePosted\": \"2017:11:30:12:28:38\",\n      \"rating\": 3\n    }\n ],\n \"linkedPictureIDs\": [\"/home/matthewv/SD_B_1_ProjectName/REST/controllers/profilePictures/KENNETH\\ HO.jpg1511\"]\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "controllers/propertyController.js",    "groupTitle": "Property",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/listAllProperties",    "title": "",    "name": "listAllProperties",    "group": "Property",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users upique cookie.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Property[]",            "optional": false,            "field": "res",            "description": "<p>Array of properties is echoed back in the response.</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n[\n  {\n   \"_id\": \"5a244a7e57b6131e280bb713\",\n    \"personalBathroom\": true,\n    \"bathroomQuantity\": 3,\n    \"roommateQuantity\": 2,\n    \"posterUsername\": \"username\",\n    \"leasingAgency\": \"LeonardLeasing\",\n    \"rentValue\": 685,\n    \"address\": \"135 Campus Ave, Ames, Iowa 50010\",\n    \"postingMessage\": \"A swell place, upstairs neighbors are kind of loud\",\n    \"propertyID\": \"988a43e205d218e3ef5a91bdf8dd8df78f181607\",\n    \"longitude\": \"-93.6573635\",\n    \"latitude\": \"42.02399459999999\",\n    \"milesFromMU\": 1.1,\n    \"__v\": 0,\n    \"ratings\": [\n      {\n        \"ratingPosterUsername\": \"LeonardLeasing\",\n        \"timePosted\": \"2017:12:03:18:13:29\",\n        \"rating\": 4\n      },\n      {\n        \"rating\": 1,\n        \"timePosted\": \"2017:12:03:18:13:34\",\n        \"ratingPosterUsername\": \"LeonardLeasing\"\n      },\n      {\n        \"ratingPosterUsername\": \"LeonardLeasing\",\n        \"timePosted\": \"2017:12:03:18:13:36\",\n        \"rating\": 2\n      }\n    ],\n    \"linkedPictureIDs\": []\n  },\n  {\n    \"_id\": \"5a244aed57b6131e280bb717\",\n    \"personalBathroom\": true,\n    \"bathroomQuantity\": 3,\n    \"roommateQuantity\": 2,\n    \"posterUsername\": \"username\",\n    \"leasingAgency\": \"FPM\",\n    \"rentValue\": 500,\n    \"address\": \"123 Sheldon Ave, Ames, Iowa 50010\",\n    \"postingMessage\": \"Upstairs Neighbors are lax bros so thats cool\",\n    \"propertyID\": \"df3b86873975af2dfbd8d5c2f02150652c8c651d\",\n    \"longitude\": \"-93.6546479\",\n    \"latitude\": \"42.0236491\",\n    \"milesFromMU\": 0.8,\n    \"__v\": 0,\n    \"comments\": [\n      {\n        \"commentPosterUsername\": \"username\",\n        \"timePosted\": \"2017:12:03:15:29:35\",\n        \"message\": \"McDouble\"\n      }\n    ],\n    \"ratings\": [\n      {\n        \"rating\": 1,\n        \"timePosted\": \"2017:12:03:15:29:39\",\n        \"ratingPosterUsername\": \"username\"\n      },\n      {\n        \"ratingPosterUsername\": \"username\",\n        \"timePosted\": \"2017:12:03:15:29:42\",\n        \"rating\": 2\n      },\n      {\n        \"rating\": 4,\n        \"timePosted\": \"2017:12:03:15:29:45\",\n        \"ratingPosterUsername\": \"username\"\n      },\n      {\n        \"ratingPosterUsername\": \"username\",\n        \"timePosted\": \"2017:12:03:17:59:23\",\n        \"rating\": 3\n      },\n      {\n        \"rating\": 1,\n        \"timePosted\": \"2017:12:03:17:59:26\",\n        \"ratingPosterUsername\": \"username\"\n      },\n      {\n        \"ratingPosterUsername\": \"username\",\n        \"timePosted\": \"2017:12:03:17:59:28\",\n        \"rating\": 5\n      }\n    ],\n    \"linkedPictureIDs\": []\n  },\n  {\n    \"_id\": \"5a244d07171df51eb65b6bc3\",\n    \"personalBathroom\": false,\n    \"bathroomQuantity\": 2,\n    \"roommateQuantity\": 2,\n    \"posterUsername\": \"username\",\n    \"leasingAgency\": \"LeonardLeasing\",\n    \"rentValue\": 1000,\n    \"address\": \"3824 Tripp St, Ames, Iowa 50010\",\n    \"postingMessage\": \"Totally in the hood, cheap rent makes up for morning gun shots.\",\n    \"propertyID\": \"5c6f454cf9c8794f012ce118bac7de59c8bc0b9c\",\n    \"longitude\": \"-93.67011699999999\",\n    \"latitude\": \"42.019566\",\n    \"milesFromMU\": 2.3,\n    \"__v\": 0,\n    \"ratings\": [\n      {\n        \"ratingPosterUsername\": \"username\",\n        \"timePosted\": \"2017:12:03:15:30:17\",\n        \"rating\": 5\n      },\n      {\n        \"ratingPosterUsername\": \"username\",\n        \"timePosted\": \"2017:12:03:16:27:53\",\n        \"rating\": 3\n      },\n      {\n        \"rating\": 5,\n        \"timePosted\": \"2017:12:03:16:30:34\",\n        \"ratingPosterUsername\": \"username\"\n      },\n      {\n        \"ratingPosterUsername\": \"username\",\n        \"timePosted\": \"2017:12:03:18:09:37\",\n        \"rating\": 5\n      }\n    ],\n    \"comments\": [\n      {\n        \"message\": \"FiletOfish\",\n        \"timePosted\": \"2017:12:03:15:30:32\",\n        \"commentPosterUsername\": \"username\"\n      }\n    ],\n    \"linkedPictureIDs\": [\n      \"/home/matthewv/SD_B_1_ProjectName/REST/controllers/propertyPictures/Screen Shot 2017-12-03 at 1.05.36 PM.png1512345496197\",\n      \"/home/matthewv/SD_B_1_ProjectName/REST/controllers/propertyPictures/Screen Shot 2017-12-03 at 1.05.46 PM.png1512345496583\"\n    ]\n  }\n]",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "controllers/propertyController.js",    "groupTitle": "Property",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "put",    "url": "/property/{propertyID}",    "title": "",    "name": "updateSpecificProperty",    "group": "Property",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users upique cookie.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "propertyID",            "description": "<p>Unique ID associated with property.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "PROPERTY_OBJECT_ATTRIBUTE",            "description": "<p>Any other property model attributes can be added and will be updated in the database.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Property",            "optional": false,            "field": "res",            "description": "<p>The update property object is echoed back or an error code is returned.</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n  \"_id\": \"5a1601b55de8fd2455f02392\",\n  \"personalBathroom\": false,\n  \"bathroomQuantity\": 3,\n  \"roommateQuantity\": 1,\n  \"posterUsername\": \"username\",\n  \"leasingAgency\": \"dfd\",\n   \"milesFromMU\": 0.8,\n  \"rentValue\": 2322222,\n  \"address\": \"223 Lynn Avenue, Ames, Iowa 50014\",\n  \"postingMessage\": \"22\",\n  \"propertyID\": \"94b730f94a0c72a2c023099a62c78f59a2bd097b\",\n  \"longitude\": \"-93.64681569999999\",\n  \"latitude\": \"42.02074409999999\",\n  \"__v\": 0,\n  \"comments\": [\n    {\n      \"message\": \"This is a new comment \",\n      \"timePosted\": \"2017:11:27:14:55:15\",\n      \"commentPosterUsername\": \"matt\"\n    },\n    {\n      \"commentPosterUsername\": \"matt\",\n      \"timePosted\": \"2017:11:27:14:55:26\",\n      \"message\": \"This is a new comment 2\"\n    }\n  ],\n  \"ratings\": [\n    {\n      \"ratingPosterUsername\": \"matt\",\n      \"timePosted\": \"2017:11:30:12:28:31\",\n      \"rating\": 5\n    },\n    {\n      \"rating\": 3,\n      \"timePosted\": \"2017:11:30:12:28:34\",\n      \"ratingPosterUsername\": \"matt\"\n    },\n    {\n      \"ratingPosterUsername\": \"matt\",\n      \"timePosted\": \"2017:11:30:12:28:38\",\n      \"rating\": 3\n    }\n ],\n \"linkedPictureIDs\": [\"/home/matthewv/SD_B_1_ProjectName/REST/controllers/profilePictures/KENNETH\\ HO.jpg1511\"]\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "controllers/propertyController.js",    "groupTitle": "Property",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/approve/{accountUsername}",    "title": "",    "name": "approveUserType",    "group": "UserType_Approvals",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "accountUsername",            "description": "<p>Users unique ID, of the account to be updated.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID, of the account making the request.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users unique session cookie.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "string",            "optional": false,            "field": "msg",            "description": "<p>A success message of 'user updated' is returned</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n  \"msg\" : \"user updated\"\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "controllers/userController.js",    "groupTitle": "UserType_Approvals",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/getApprovals",    "title": "",    "name": "getPendingApprovals",    "group": "UserType_Approvals",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID, of the account making the request.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users unique session cookie.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "User[]",            "optional": false,            "field": "res",            "description": "<p>An array of User Objects (only leasers or admins) is returned.</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n[\n {\n   \"_id\": \"5a230d29f4aa487aae78f9d5\",\n   \"username\": \"testleasingAgency\",\n   \"hashedPassword\": \"5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\",\n   \"email\": \"abc@gmail.com\",\n   \"phoneNumber\": \"1234123412\",\n   \"userType\": \"leasing\",\n   \"__v\": 0,\n   \"userTypeApproved\": false,\n   \"favoriteProperties\": []\n },\n {\n   \"_id\": \"5a230d6af4aa487aae78f9d6\",\n   \"username\": \"testAdmin\",\n   \"hashedPassword\": \"38f2279f58fdd8ad2b6f6f62095658ab9a896c96\",\n   \"email\": \"test@test.com\",\n   \"phoneNumber\": \"1234123412\",\n   \"userType\": \"admin\",\n   \"__v\": 0,\n   \"userTypeApproved\": null,\n   \"favoriteProperties\": []\n }\n]",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "controllers/userController.js",    "groupTitle": "UserType_Approvals",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/users/{userName}",    "title": "",    "name": "allowRouting",    "group": "User_Authentication",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "userName",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users unique cookie.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "string",            "optional": false,            "field": "msg",            "description": "<p>The success message &quot;authentication accepted&quot; is returned</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n  \"msg\" : \"authentication accepted\"\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "controllers/userController.js",    "groupTitle": "User_Authentication",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/login/{username}",    "title": "",    "name": "authAndReturnCookie",    "group": "User_Authentication",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "hashedPassword",            "description": "<p>Users hased password.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users session cookie is sent in the response.</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n  \"subleaseISUcookie\" : \"00bd65bab3b91ebce7693789c8478940cd61c330\"\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "controllers/userController.js",    "groupTitle": "User_Authentication",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/retrieveProfilePicture/{userName}",    "title": "",    "name": "retrieveProfilePic",    "group": "User_Profile_Picture",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "userName",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users unique cookie.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "File",            "optional": false,            "field": "fileName",            "description": "<p>The profilePictureLocation file (image) is sent back asynchronously to the caller.</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "controllers/userController.js",    "groupTitle": "User_Profile_Picture",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/uploadProfilePicture/{userName}",    "title": "",    "name": "uploadProfilePicture",    "group": "User_Profile_Picture",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "userName",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID, is also provided in the formdata.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users unique cookie (formdata).</p>"          },          {            "group": "Parameter",            "type": "File",            "optional": false,            "field": "fileName",            "description": "<p>Profile picture is sent through formdata.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "User",            "optional": false,            "field": "res",            "description": "<p>The User Object is echoed back in the response with the new pictureLocation updated.</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n  \"_id\" : ObjectId(\"59f8eb5fefc008260848e563\"),\n  \"username\" : \"johnSmith34\",\n  \"userType\" : \"regular\",\n  \"favoriteProperties\" : [],\n  \"userTypeApproved\" : null,\n  \"email\" : \"test@test.test\",\n  \"phoneNumber\" : \"1212121212\",\n  \"__v\" : 0,\n  \"profilePictureLocation\" : \"/home/matthewv/SD_B_1_ProjectName/REST/controllers/propertyPictures/Screen Shot 2017-12-03 at 1.05.46 PM.png1512336951925\"\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "controllers/userController.js",    "groupTitle": "User_Profile_Picture",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/users",    "title": "",    "name": "createUser",    "group": "User",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "userType",            "description": "<p>User's Account type. (Admin, Leaser, Renter)</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "hashedPassword",            "description": "<p>SHA1 Hash of User's Password.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "email",            "description": "<p>User's email address. (Optional)</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "phoneNumber",            "description": "<p>User's phone number. (Optional)</p>"          },          {            "group": "Parameter",            "type": "string[]",            "optional": false,            "field": "favoriteProperties",            "description": "<p>propertyIDs of User's favorite properties. (Initially null, optional)</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "User",            "optional": false,            "field": "res",            "description": "<p>The User Object is echoed back in the response</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n  \"_id\" : ObjectId(\"59f8eb5fefc008260848e563\"),\n  \"username\" : \"matthewv\",\n  \"userType\" : \"admin\",\n  \"favoriteProperties\" : [],\n  \"userTypeApproved\" : false,\n  \"email\" : \"test@test.test\",\n  \"phoneNumber\" : \"1212121212\",\n  \"__v\" : 0,\n  \"profilePictureLocation\" : \"/home/matthewv/SD_B_1_ProjectName/REST/controllers/propertyPictures/Screen Shot 2017-12-03 at 1.05.46 PM.png1512336951925\"\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "controllers/userController.js",    "groupTitle": "User",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "delete",    "url": "/users/{userName}",    "title": "",    "name": "deleteSpecificUser",    "group": "User",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "userName",            "description": "<p>Users unique ID, of the account to be deleted.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID, of the account making the request.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users unique session cookie.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "string",            "optional": false,            "field": "msg",            "description": "<p>The success message is returned</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n  \"msg\" : \"User successfully deleted\"\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "controllers/userController.js",    "groupTitle": "User",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "get",    "url": "/users/{userName}",    "title": "",    "name": "getSpecificUser",    "group": "User",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "userName",            "description": "<p>Users unique ID.</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "User",            "optional": false,            "field": "res",            "description": "<p>The User Object is returned in the response.</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n  \"_id\" : ObjectId(\"59f8eb5fefc008260848e563\"),\n  \"username\" : \"matthewv\",\n  \"userType\" : \"admin\",\n  \"favoriteProperties\" : [],\n  \"userTypeApproved\" : false,\n  \"email\" : \"test@test.test\",\n  \"phoneNumber\" : \"1212121212\",\n  \"__v\" : 0,\n  \"profilePictureLocation\" : \"/home/matthewv/SD_B_1_ProjectName/REST/controllers/propertyPictures/Screen Shot 2017-12-03 at 1.05.46 PM.png1512336951925\"\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "controllers/userController.js",    "groupTitle": "User",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  },  {    "type": "put",    "url": "/users/{userName}",    "title": "",    "name": "updateSpecificUser",    "group": "User",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "userName",            "description": "<p>Users unique ID, of the account to be updated.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "username",            "description": "<p>Users unique ID, of the account making the request.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "subleaseISUcookie",            "description": "<p>Users unique session cookie.</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "userType",            "description": "<p>User's Account type. (Admin, Leaser, Renter) (Optional)</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "userTypeApproved",            "description": "<p>Boolean representing approval of userType. (Initially null, Optional)</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "hashedPassword",            "description": "<p>SHA1 Hash of User's Password. (Optional)</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "email",            "description": "<p>User's email address. (Optional)</p>"          },          {            "group": "Parameter",            "type": "string",            "optional": false,            "field": "phoneNumber",            "description": "<p>User's phone number. (Optional)</p>"          },          {            "group": "Parameter",            "type": "string[]",            "optional": false,            "field": "favoriteProperties",            "description": "<p>propertyIDs of User's favorite properties. (Initially null, optional)</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "User",            "optional": false,            "field": "res",            "description": "<p>The updated User Object is echoed in the response</p>"          }        ]      },      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 OK\n{\n  \"_id\" : ObjectId(\"59f8eb5fefc008260848e563\"),\n  \"username\" : \"johnSmith34\",\n  \"userType\" : \"regular\",\n  \"favoriteProperties\" : [],\n  \"userTypeApproved\" : null,\n  \"email\" : \"test@test.test\",\n  \"phoneNumber\" : \"1212121212\",\n  \"__v\" : 0,\n  \"profilePictureLocation\" : \"/home/matthewv/SD_B_1_ProjectName/REST/controllers/propertyPictures/Screen Shot 2017-12-03 at 1.05.46 PM.png1512336951925\"\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "controllers/userController.js",    "groupTitle": "User",    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotFound",            "description": "<p>The username of the User was not found.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "UsernameNotProvided",            "description": "<p>The username of the User was not in the request.</p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "DatabaseError",            "description": "<p>There was an error in the MongoDB query</p>"          }        ]      },      "examples": [        {          "title": "UsernameNotFoundError-Error-Response:",          "content": "HTTP/1.1 401 Unauthorized\n{\n  \"error\": \"username not recognized\"\n}",          "type": "json"        },        {          "title": "UsernameNotProvided-Error-Response:",          "content": "HTTP/1.1 400 Bad request\n{\n  \"error\": \"username not provided in request\"\n}",          "type": "json"        },        {          "title": "DatabaseError-Error-Response:",          "content": "HTTP/1.1 500 Internal Server Error\n{\n  \"error\": error\n}",          "type": "json"        }      ]    }  }]
